import sys
import serial
import serial.tools.list_ports
from PyQt5.QtWidgets import (
    QApplication, QWidget, QPushButton, QVBoxLayout,
    QComboBox, QLabel, QFileDialog, QHBoxLayout, 
    QCheckBox, QSpacerItem, QSizePolicy, QStatusBar,
    QGroupBox
)
from PyQt5.QtCore import QTimer, Qt
from PyQt5.QtGui import QFont, QColor
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.ticker import AutoMinorLocator
from collections import deque
import csv
import datetime
import numpy as np
import pynmea2

# --- Speed Estimator Class ---
from numpy import array, polyfit, exp

class AltimeterSpeed():
    def __init__(self, polydegree=3, listlen=40, tau=2):
        self.polydegree = polydegree
        self.listlen = listlen
        self.tau = tau
        self.times = []
        self.depths = []

    def set_time_depth(self, time, depth):
        self.times.append(time)
        self.depths.append(depth)
        if len(self.times) > self.listlen:
            self.depths.pop(0)
            self.times.pop(0)

    def get_speeds(self):
        if len(self.times) < 2:
            return 0., 0.
        t = array(self.times) - self.times[-1]
        d = array(self.depths)
        if len(self.times) <= self.polydegree:
            ispeed = 0.
        else:
            w = exp(t/self.tau)
            ispeed = polyfit(t, d, self.polydegree, w=w)[-2]
        aspeed = polyfit(t, d, 1)[-2]
        return ispeed, aspeed

class SerialPlotApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("🌊 Altimeter & GPS Plotter")
        self.setGeometry(300, 150, 1000, 900)
        self.setStyleSheet("""
            background-color: #1e1e2f; 
            color: white;
            QPushButton {
                padding: 5px 10px;
                border-radius: 4px;
                min-width: 80px;
            }
            QComboBox {
                padding: 3px;
            }
            QGroupBox {
                border: 1px solid #444;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 15px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 3px;
            }
        """)

        self.serial = None
        self.gps_serial = None
        self.data = deque(maxlen=500)
        self.time = deque(maxlen=500)
        self.start_time = datetime.datetime.now()
        self.log_data = []
        self.last_value = None
        self.sampling_rate = 100
        self.gps_data = {
            'latitude': None,
            'longitude': None,
            'altitude': None,
            'speed': None,
            'fix_quality': None,
            'num_sats': None,
            'timestamp': None,
            'valid': False
        }

        self.speed_tracker = AltimeterSpeed(polydegree=3, listlen=40, tau=2)

        self.init_ui()
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_plot)
        self.gps_timer = QTimer()
        self.gps_timer.timeout.connect(self.read_gps)
        self.refresh_ports()

    def init_ui(self):
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(15, 15, 15, 15)
        main_layout.setSpacing(15)

        # Serial Port Configuration
        port_group = QGroupBox("Serial Port Configuration")
        port_layout = QVBoxLayout()
        
        # Altimeter Port
        altimeter_layout = QHBoxLayout()
        self.altimeter_label = QLabel("Altimeter COM Port:")
        self.altimeter_label.setFont(QFont("Arial", 10, QFont.Bold))
        altimeter_layout.addWidget(self.altimeter_label)

        self.port_combo = QComboBox()
        self.port_combo.setFont(QFont("Arial", 10))
        self.port_combo.setMinimumWidth(200)
        altimeter_layout.addWidget(self.port_combo)

        self.refresh_button = QPushButton("🔄 Refresh")
        self.refresh_button.setToolTip("Refresh COM ports")
        self.refresh_button.setFixedWidth(100)
        self.refresh_button.clicked.connect(self.refresh_ports)
        altimeter_layout.addWidget(self.refresh_button)

        self.baud_combo = QComboBox()
        self.baud_combo.addItems(["9600", "19200", "38400", "57600", "115200"])
        self.baud_combo.setCurrentText("9600")
        self.baud_combo.setFont(QFont("Arial", 10))
        self.baud_combo.setFixedWidth(100)
        altimeter_layout.addWidget(QLabel("Baud:"))
        altimeter_layout.addWidget(self.baud_combo)
        port_layout.addLayout(altimeter_layout)

        # GPS Port
        gps_layout = QHBoxLayout()
        self.gps_label = QLabel("GPS COM Port:")
        self.gps_label.setFont(QFont("Arial", 10, QFont.Bold))
        gps_layout.addWidget(self.gps_label)

        self.gps_port_combo = QComboBox()
        self.gps_port_combo.setFont(QFont("Arial", 10))
        self.gps_port_combo.setMinimumWidth(200)
        gps_layout.addWidget(self.gps_port_combo)

        self.gps_baud_combo = QComboBox()
        self.gps_baud_combo.addItems(["4800", "9600", "19200", "38400", "57600", "115200"])
        self.gps_baud_combo.setCurrentText("9600")
        self.gps_baud_combo.setFont(QFont("Arial", 10))
        self.gps_baud_combo.setFixedWidth(100)
        gps_layout.addWidget(QLabel("Baud:"))
        gps_layout.addWidget(self.gps_baud_combo)

        self.gps_connect_button = QPushButton("Connect GPS")
        self.gps_connect_button.setStyleSheet("background-color: #4CAF50; color: white;")
        self.gps_connect_button.clicked.connect(self.toggle_gps_connection)
        gps_layout.addWidget(self.gps_connect_button)
        port_layout.addLayout(gps_layout)

        port_group.setLayout(port_layout)
        main_layout.addWidget(port_group)

        # Control Buttons
        button_layout = QHBoxLayout()
        button_layout.setSpacing(10)

        self.start_button = QPushButton("▶ Start Altimeter")
        self.start_button.setStyleSheet("""
            background-color: #4CAF50; 
            color: white; 
            font-weight: bold;
            min-width: 120px;
        """)
        self.start_button.clicked.connect(self.start_reading)
        button_layout.addWidget(self.start_button)

        self.stop_button = QPushButton("■ Stop Altimeter")
        self.stop_button.setStyleSheet("""
            background-color: #F44336; 
            color: white; 
            font-weight: bold;
            min-width: 120px;
        """)
        self.stop_button.clicked.connect(self.stop_reading)
        self.stop_button.setEnabled(False)
        button_layout.addWidget(self.stop_button)

        self.save_button = QPushButton("📀 Save CSV")
        self.save_button.setStyleSheet("""
            background-color: #2196F3; 
            color: white;
            min-width: 120px;
        """)
        self.save_button.clicked.connect(self.save_csv)
        button_layout.addWidget(self.save_button)

        self.clear_button = QPushButton("🗑️ Clear Plot")
        self.clear_button.setStyleSheet("""
            background-color: #FF9800; 
            color: white;
        """)
        self.clear_button.clicked.connect(self.clear_plot)
        button_layout.addWidget(self.clear_button)

        button_layout.addStretch()
        main_layout.addLayout(button_layout)

        # Settings
        settings_layout = QHBoxLayout()
        settings_layout.setSpacing(15)

        self.checkbox_conf = QCheckBox("Ignore low confidence (0)")
        self.checkbox_conf.setFont(QFont("Arial", 10))
        settings_layout.addWidget(self.checkbox_conf)

        self.smooth_checkbox = QCheckBox("Enable Smoothing")
        self.smooth_checkbox.setFont(QFont("Arial", 10))
        self.smooth_checkbox.setChecked(True)
        settings_layout.addWidget(self.smooth_checkbox)

        self.max_points_label = QLabel("Max Points:")
        self.max_points_label.setFont(QFont("Arial", 10))
        settings_layout.addWidget(self.max_points_label)

        self.max_points_combo = QComboBox()
        self.max_points_combo.addItems(["100", "200", "500", "1000", "2000"])
        self.max_points_combo.setCurrentText("500")
        self.max_points_combo.setFont(QFont("Arial", 10))
        self.max_points_combo.setFixedWidth(80)
        self.max_points_combo.currentTextChanged.connect(self.update_max_points)
        settings_layout.addWidget(self.max_points_combo)

        settings_layout.addStretch()
        main_layout.addLayout(settings_layout)

        # Plot
        self.figure, self.ax = plt.subplots(figsize=(10, 6))
        self.figure.set_facecolor("#1e1e2f")
        self.canvas = FigureCanvas(self.figure)
        self.canvas.setStyleSheet("background-color: transparent;")
        main_layout.addWidget(self.canvas, stretch=1)

        self.configure_plot()

        # GPS Info Display
        gps_info_group = QGroupBox("GPS Information")
        gps_info_layout = QHBoxLayout()
        
        self.gps_status_label = QLabel("GPS: Not Connected")
        self.gps_status_label.setFont(QFont("Arial", 10, QFont.Bold))
        self.gps_status_label.setStyleSheet("color: #ff5555;")
        gps_info_layout.addWidget(self.gps_status_label)

        self.gps_coords_label = QLabel("Lat/Lon: --")
        self.gps_coords_label.setFont(QFont("Arial", 10))
        gps_info_layout.addWidget(self.gps_coords_label)

        self.gps_altitude_label = QLabel("Altitude: --")
        self.gps_altitude_label.setFont(QFont("Arial", 10))
        gps_info_layout.addWidget(self.gps_altitude_label)

        self.gps_sats_label = QLabel("Sats: --")
        self.gps_sats_label.setFont(QFont("Arial", 10))
        gps_info_layout.addWidget(self.gps_sats_label)

        gps_info_group.setLayout(gps_info_layout)
        main_layout.addWidget(gps_info_group)

        # Distance and Speed Display
        self.distance_label = QLabel("Distance: -- m")
        self.distance_label.setFont(QFont("Arial", 32, QFont.Bold))
        self.distance_label.setAlignment(Qt.AlignCenter)
        self.distance_label.setStyleSheet("""
            color: #00ffff; 
            margin-top: 10px; 
            margin-bottom: 10px;
            background-color: #202030;
            border-radius: 5px;
            padding: 10px;
        """)
        main_layout.addWidget(self.distance_label)

        self.speed_label = QLabel("Speed: -- m/min (avg: -- m/min)")
        self.speed_label.setFont(QFont("Arial", 16, QFont.Bold))
        self.speed_label.setAlignment(Qt.AlignCenter)
        self.speed_label.setStyleSheet("""
            color: #00ff99;
            margin-bottom: 10px;
            background-color: #202030;
            border-radius: 5px;
            padding: 6px;
        """)
        main_layout.addWidget(self.speed_label)

        self.status_bar = QStatusBar()
        self.status_bar.setFont(QFont("Arial", 9))
        self.status_bar.setStyleSheet("""
            QStatusBar {
                background-color: #202030;
                color: #aaaaaa;
                border-top: 1px solid #444;
            }
        """)
        self.status_bar.showMessage("Ready")
        main_layout.addWidget(self.status_bar)

        self.setLayout(main_layout)

    def configure_plot(self):
        self.ax.set_facecolor("#202030")
        self.ax.set_title("Distance Measurement Over Time", color="white", fontsize=14, pad=20)
        self.ax.set_xlabel("Time (s)", color="white", fontsize=12)
        self.ax.set_ylabel("Distance (m)", color="white", fontsize=12)
        self.ax.tick_params(axis='both', colors='white', labelsize=10)
        self.ax.xaxis.set_minor_locator(AutoMinorLocator())
        self.ax.yaxis.set_minor_locator(AutoMinorLocator())
        self.ax.grid(True, color='#444', linestyle='--', linewidth=0.5)
        self.ax.grid(True, which='minor', color='#333', linestyle=':', linewidth=0.5)
        self.canvas.draw()

    def refresh_ports(self):
        ports = serial.tools.list_ports.comports()
        self.port_combo.clear()
        self.gps_port_combo.clear()
        for port in ports:
            self.port_combo.addItem(port.device)
            self.gps_port_combo.addItem(port.device)
        self.status_bar.showMessage(f"Found {len(ports)} COM ports" if ports else "No COM ports found")

    def toggle_gps_connection(self):
        if self.gps_serial and self.gps_serial.is_open:
            self.disconnect_gps()
        else:
            self.connect_gps()

    def connect_gps(self):
        port = self.gps_port_combo.currentText()
        baud = int(self.gps_baud_combo.currentText())
        if port:
            try:
                self.gps_serial = serial.Serial(port, baud, timeout=1)
                self.gps_serial.flushInput()
                self.gps_timer.start(100)  # Check GPS every 100ms
                self.gps_connect_button.setText("Disconnect GPS")
                self.gps_connect_button.setStyleSheet("background-color: #F44336; color: white;")
                self.gps_status_label.setText("GPS: Connecting...")
                self.gps_status_label.setStyleSheet("color: #ffaa00;")
                self.status_bar.showMessage(f"GPS connected to {port} at {baud} baud")
            except Exception as e:
                self.status_bar.showMessage(f"GPS connection error: {str(e)}")

    def disconnect_gps(self):
        try:
            if self.gps_serial and self.gps_serial.is_open:
                self.gps_serial.close()
                self.gps_timer.stop()
                self.gps_connect_button.setText("Connect GPS")
                self.gps_connect_button.setStyleSheet("background-color: #4CAF50; color: white;")
                self.gps_status_label.setText("GPS: Not Connected")
                self.gps_status_label.setStyleSheet("color: #ff5555;")
                self.status_bar.showMessage("GPS disconnected")
        except Exception as e:
            self.status_bar.showMessage(f"GPS disconnection error: {e}")

    def read_gps(self):
        if self.gps_serial and self.gps_serial.in_waiting:
            try:
                line = self.gps_serial.readline().decode('ascii', errors='replace').strip()
                if line.startswith('$'):
                    try:
                        msg = pynmea2.parse(line)
                        if isinstance(msg, pynmea2.GGA):
                            self.process_gga(msg)
                        elif isinstance(msg, pynmea2.RMC):
                            self.process_rmc(msg)
                    except pynmea2.ParseError as e:
                        pass  # Ignore parse errors for other NMEA sentences
            except Exception as e:
                self.status_bar.showMessage(f"GPS read error: {str(e)}")

    def process_gga(self, msg):
        self.gps_data['altitude'] = msg.altitude
        self.gps_data['fix_quality'] = msg.gps_qual
        self.gps_data['num_sats'] = msg.num_sats
        
        # Update GPS info display
        if msg.gps_qual > 0:
            self.gps_status_label.setText("GPS: Valid Fix")
            self.gps_status_label.setStyleSheet("color: #55ff55;")
            self.gps_data['valid'] = True
        else:
            self.gps_status_label.setText("GPS: No Fix")
            self.gps_status_label.setStyleSheet("color: #ffaa00;")
            self.gps_data['valid'] = False

        self.gps_altitude_label.setText(f"Altitude: {msg.altitude if msg.altitude else '--'} {msg.altitude_units if msg.altitude_units else 'm'}")
        self.gps_sats_label.setText(f"Sats: {msg.num_sats if msg.num_sats else '--'}")

    def process_rmc(self, msg):
        if msg.lat and msg.lon and msg.is_valid:
            lat = f"{msg.lat:.6f}{msg.lat_dir}"
            lon = f"{msg.lon:.6f}{msg.lon_dir}"
            self.gps_data['latitude'] = msg.latitude
            self.gps_data['longitude'] = msg.longitude
            self.gps_data['speed'] = msg.spd_over_grnd
            self.gps_data['timestamp'] = msg.datetime
            
            self.gps_coords_label.setText(f"Lat/Lon: {lat}, {lon}")
            self.gps_status_label.setText("GPS: Valid Fix")
            self.gps_status_label.setStyleSheet("color: #55ff55;")
            self.gps_data['valid'] = True
        else:
            self.gps_data['valid'] = False

    def start_reading(self):
        port = self.port_combo.currentText()
        baud = int(self.baud_combo.currentText())
        if port:
            try:
                self.serial = serial.Serial(port, baud, timeout=1)
                self.serial.flushInput()
                self.timer.start(self.sampling_rate)
                self.start_time = datetime.datetime.now()
                self.log_data = []
                self.data.clear()
                self.time.clear()
                self.start_button.setEnabled(False)
                self.stop_button.setEnabled(True)
                self.status_bar.showMessage(f"Reading from {port} at {baud} baud")
            except Exception as e:
                self.status_bar.showMessage(f"Error: {str(e)}")

    def stop_reading(self):
        try:
            if self.serial and self.serial.is_open:
                self.serial.close()
        except Exception as e:
            self.status_bar.showMessage(f"Stop error: {e}")
        self.timer.stop()
        self.status_bar.showMessage("Stopped")
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)

    def save_csv(self):
        if not self.log_data:
            self.status_bar.showMessage("No data to save")
            return

        file_path, _ = QFileDialog.getSaveFileName(
            self, 
            "Save CSV", 
            f"altimeter_gps_data_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv", 
            "CSV Files (*.csv)"
        )
        if file_path:
            try:
                with open(file_path, 'w', newline='') as f:
                    writer = csv.writer(f)
                    # Enhanced header with GPS information
                    writer.writerow([
                        "Timestamp (s)", 
                        "Distance (m)", 
                        "Confidence",
                        "Latitude",
                        "Longitude",
                        "Altitude (m)",
                        "GPS Speed (knots)",
                        "Fix Quality",
                        "Satellites",
                        "GPS Timestamp"
                    ])
                    
                    for row in self.log_data:
                        # Add GPS data to each row if available
                        gps_row = [
                            row[0],  # timestamp
                            row[1],  # distance
                            row[2],  # confidence
                            self.gps_data['latitude'] if self.gps_data['valid'] else "",
                            self.gps_data['longitude'] if self.gps_data['valid'] else "",
                            self.gps_data['altitude'] if self.gps_data['valid'] else "",
                            self.gps_data['speed'] if self.gps_data['valid'] else "",
                            self.gps_data['fix_quality'] if self.gps_data['valid'] else "",
                            self.gps_data['num_sats'] if self.gps_data['valid'] else "",
                            self.gps_data['timestamp'].strftime('%Y-%m-%d %H:%M:%S') if self.gps_data['valid'] and self.gps_data['timestamp'] else ""
                        ]
                        writer.writerow(gps_row)
                self.status_bar.showMessage(f"Data saved to {file_path}")
            except Exception as e:
                self.status_bar.showMessage(f"Save error: {e}")

    def clear_plot(self):
        self.data.clear()
        self.time.clear()
        self.log_data = []
        self.last_value = None
        self.speed_label.setText("Speed: -- m/min (avg: -- m/min)")
        self.speed_tracker = AltimeterSpeed(polydegree=3, listlen=40, tau=2)
        self.distance_label.setText("Distance: -- m")
        self.configure_plot()
        self.status_bar.showMessage("Plot cleared")

    def update_max_points(self):
        max_points = int(self.max_points_combo.currentText())
        self.data = deque(self.data, maxlen=max_points)
        self.time = deque(self.time, maxlen=max_points)
        self.status_bar.showMessage(f"Max points set to {max_points}")

    def smooth_data(self, y, window_size=5):
        if len(y) < window_size:
            return y
        window = np.ones(window_size) / window_size
        return np.convolve(y, window, 'valid')

    def update_plot(self):
        if self.serial and self.serial.in_waiting:
            try:
                raw = self.serial.readline()
                line = raw.decode(errors='ignore').strip()
                if line.startswith("#U0") and "," in line:
                    clean = line[4:]
                    parts = clean.split(",")
                    if len(parts) == 2:
                        value_mm = int(parts[0])
                        conf = int(parts[1])

                        if self.checkbox_conf.isChecked() and conf == 0:
                            return

                        value_m = value_mm / 1000.0
                        self.last_value = value_m
                        self.distance_label.setText(f"Distance: {value_m:.3f} m")

                        timestamp = (datetime.datetime.now() - self.start_time).total_seconds()
                        self.time.append(timestamp)
                        self.data.append(value_m)
                        
                        # Log data with timestamp
                        log_entry = [timestamp, value_m, conf]
                        self.log_data.append(log_entry)

                        self.speed_tracker.set_time_depth(timestamp / 60.0, value_m)
                        ispeed, aspeed = self.speed_tracker.get_speeds()
                        self.speed_label.setText(
                            f"Speed: {ispeed:.2f} m/min (avg: {aspeed:.2f} m/min)"
                        )

                        time_array = np.array(self.time)
                        data_array = np.array(self.data)
                        if self.smooth_checkbox.isChecked() and len(data_array) > 5:
                            smoothed_data = self.smooth_data(data_array)
                            plot_time = time_array[len(time_array)-len(smoothed_data):]
                            plot_data = smoothed_data
                        else:
                            plot_time = time_array
                            plot_data = data_array

                        self.ax.clear()
                        self.ax.plot(plot_time, plot_data, label=f"Distance (m)", color="#00ffff",
                                     linewidth=2, marker='o', markersize=4,
                                     markerfacecolor="#ff9900", markeredgecolor="#ff9900")
                        self.configure_plot()
                        self.ax.legend(loc="upper right", facecolor="#202030", edgecolor="white",
                                       fontsize=10, labelcolor='white')
                        if len(plot_time) > 0:
                            self.ax.relim()
                            self.ax.autoscale_view()
                        self.canvas.draw()
                        
                        # Update status with GPS info if available
                        gps_status = ""
                        if self.gps_data['valid']:
                            gps_status = f" | GPS: {self.gps_data['latitude']:.4f}°, {self.gps_data['longitude']:.4f}°"
                        
                        self.status_bar.showMessage(
                            f"Time: {timestamp:.1f}s | Distance: {value_m:.3f} m | Confidence: {conf} | Points: {len(self.data)}{gps_status}"
                        )
            except Exception as e:
                self.status_bar.showMessage(f"Error: {str(e)}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    window = SerialPlotApp()
    window.show()
    sys.exit(app.exec_())